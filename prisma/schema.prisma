datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  emailVerified DateTime?
  confirmEmail  Boolean?      @default(false)
  address       String?
  phone         String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reserve       Reservation[]
  favourite     Favourite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model AvailableDogs {
  id        String        @id @default(cuid())
  name      String
  breed     String
  age       String
  gender    String
  size      String
  color     String
  price     Int
  image     String
  reserve   Reservation[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model DogsGenerally {
  id          String      @id @default(cuid())
  name        String
  breed       String
  age         String
  gender      String
  size        String
  color       String
  price       Int
  image       String
  idFromAvail String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  favourite   Favourite[]
}

model Reservation {
  id              String         @id @default(cuid())
  User            User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  AvailableDogs   AvailableDogs? @relation(fields: [availableDogsId], references: [id], onDelete: Cascade)
  availableDogsId String?
}

model Favourite {
  id              String         @id @default(cuid())
  DogsGenerally   DogsGenerally? @relation(fields: [dogsGenerallyId], references: [id], onDelete: Cascade)
  dogsGenerallyId String?
  User            User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Subscribe {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
